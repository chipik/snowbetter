from sqlalchemy.orm import Session
from sqlalchemy.sql import func
from .models import Achievement, UserAchievement, User, UserProgress, Trick, AchievementType
from typing import List, Optional
import json
from datetime import datetime, timedelta

class AchievementsService:
    def __init__(self, db: Session):
        self.db = db

    def create_default_achievements(self):
        """–°–æ–∑–¥–∞–µ—Ç –±–∞–∑–æ–≤—ã–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è"""
        default_achievements = [
            # –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è –∑–∞ –∏–∑—É—á–µ–Ω–∏–µ —Ç—Ä—é–∫–æ–≤
            {
                "name": "–ü–µ—Ä–≤—ã–µ —à–∞–≥–∏",
                "description": "–ò–∑—É—á–∏—Ç–µ —Å–≤–æ–π –ø–µ—Ä–≤—ã–π —Ç—Ä—é–∫",
                "icon": "üéØ",
                "type": AchievementType.LEARNING,
                "condition_type": "tricks_learned",
                "condition_value": 1,
                "points": 10,
                "badge_color": "#10B981"
            },
            {
                "name": "–ù–æ–≤–∏—á–æ–∫",
                "description": "–ò–∑—É—á–∏—Ç–µ 5 —Ç—Ä—é–∫–æ–≤",
                "icon": "üåü",
                "type": AchievementType.LEARNING,
                "condition_type": "tricks_learned",
                "condition_value": 5,
                "points": 50,
                "badge_color": "#3B82F6"
            },
            {
                "name": "–ü—Ä–æ–≥—Ä–µ—Å—Å–æ—Ä",
                "description": "–ò–∑—É—á–∏—Ç–µ 10 —Ç—Ä—é–∫–æ–≤",
                "icon": "‚ö°",
                "type": AchievementType.LEARNING,
                "condition_type": "tricks_learned",
                "condition_value": 10,
                "points": 100,
                "badge_color": "#8B5CF6"
            },
            {
                "name": "–ú–∞—Å—Ç–µ—Ä",
                "description": "–ò–∑—É—á–∏—Ç–µ 25 —Ç—Ä—é–∫–æ–≤",
                "icon": "üî•",
                "type": AchievementType.LEARNING,
                "condition_type": "tricks_learned",
                "condition_value": 25,
                "points": 250,
                "badge_color": "#F59E0B"
            },
            {
                "name": "–õ–µ–≥–µ–Ω–¥–∞",
                "description": "–ò–∑—É—á–∏—Ç–µ 50 —Ç—Ä—é–∫–æ–≤",
                "icon": "üëë",
                "type": AchievementType.LEARNING,
                "condition_type": "tricks_learned",
                "condition_value": 50,
                "points": 500,
                "badge_color": "#DC2626"
            },
            
            # –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
            {
                "name": "–°–ø–∏–Ω–µ—Ä",
                "description": "–û—Å–≤–æ–π—Ç–µ –≤—Å–µ –≤—Ä–∞—â–µ–Ω–∏—è",
                "icon": "üåÄ",
                "type": AchievementType.CATEGORY,
                "condition_type": "category_mastered",
                "condition_data": json.dumps({"category": "spins"}),
                "points": 200,
                "badge_color": "#06B6D4"
            },
            {
                "name": "–ê–∫—Ä–æ–±–∞—Ç",
                "description": "–û—Å–≤–æ–π—Ç–µ –≤—Å–µ —Å–∞–ª—å—Ç–æ",
                "icon": "ü§∏",
                "type": AchievementType.CATEGORY,
                "condition_type": "category_mastered",
                "condition_data": json.dumps({"category": "flips"}),
                "points": 200,
                "badge_color": "#EF4444"
            },
            {
                "name": "–ì—Ä—ç–± –ú–∞—Å—Ç–µ—Ä",
                "description": "–û—Å–≤–æ–π—Ç–µ –≤—Å–µ –≥—Ä—ç–±—ã",
                "icon": "‚úã",
                "type": AchievementType.CATEGORY,
                "condition_type": "category_mastered",
                "condition_data": json.dumps({"category": "grabs"}),
                "points": 200,
                "badge_color": "#84CC16"
            },
            {
                "name": "–î–∂–∏–±–±–µ—Ä",
                "description": "–û—Å–≤–æ–π—Ç–µ –≤—Å–µ —Ç—Ä—é–∫–∏ –Ω–∞ —Ä–µ–π–ª–∞—Ö",
                "icon": "üõ§Ô∏è",
                "type": AchievementType.CATEGORY,
                "condition_type": "category_mastered",
                "condition_data": json.dumps({"category": "jibbing"}),
                "points": 200,
                "badge_color": "#A855F7"
            },
            
            # –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è –∑–∞ —Å—Ç—Ä–∏–∫–∏
            {
                "name": "–ú–æ—Ç–∏–≤–∞—Ç–æ—Ä",
                "description": "–ò–∑—É—á–∞–π—Ç–µ —Ç—Ä—é–∫–∏ 3 –¥–Ω—è –ø–æ–¥—Ä—è–¥",
                "icon": "üìÖ",
                "type": AchievementType.STREAK,
                "condition_type": "daily_streak",
                "condition_value": 3,
                "points": 75,
                "badge_color": "#F97316"
            },
            {
                "name": "–ü–æ—Å—Ç–æ—è–Ω—Å—Ç–≤–æ",
                "description": "–ò–∑—É—á–∞–π—Ç–µ —Ç—Ä—é–∫–∏ 7 –¥–Ω–µ–π –ø–æ–¥—Ä—è–¥",
                "icon": "üî•",
                "type": AchievementType.STREAK,
                "condition_type": "daily_streak",
                "condition_value": 7,
                "points": 150,
                "badge_color": "#DC2626"
            },
            
            # –°–æ—Ü–∏–∞–ª—å–Ω—ã–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
            {
                "name": "–í–∫–ª–∞–¥—á–∏–∫",
                "description": "–ü—Ä–µ–¥–ª–æ–∂–∏—Ç–µ —Å–≤–æ–π –ø–µ—Ä–≤—ã–π —Ç—Ä—é–∫",
                "icon": "üí°",
                "type": AchievementType.SOCIAL,
                "condition_type": "tricks_suggested",
                "condition_value": 1,
                "points": 100,
                "badge_color": "#6366F1"
            },
            {
                "name": "–ö—Ä–µ–∞—Ç–æ—Ä",
                "description": "–ü—Ä–µ–¥–ª–æ–∂–∏—Ç–µ 5 —Ç—Ä—é–∫–æ–≤",
                "icon": "üöÄ",
                "type": AchievementType.SOCIAL,
                "condition_type": "tricks_suggested",
                "condition_value": 5,
                "points": 300,
                "badge_color": "#8B5CF6"
            }
        ]

        for ach_data in default_achievements:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ —Ç–∞–∫–æ–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ
            existing = self.db.query(Achievement).filter(Achievement.name == ach_data["name"]).first()
            if not existing:
                achievement = Achievement(**ach_data)
                self.db.add(achievement)
        
        self.db.commit()

    def check_user_achievements(self, user_id: int) -> List[Achievement]:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∏ –≤—ã–¥–∞–µ—Ç –Ω–æ–≤—ã–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
        user = self.db.query(User).filter(User.id == user_id).first()
        if not user:
            return []

        new_achievements = []
        all_achievements = self.db.query(Achievement).filter(Achievement.is_active == True).all()
        
        # –ü–æ–ª—É—á–∞–µ–º —É–∂–µ –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        earned_achievement_ids = set(
            self.db.query(UserAchievement.achievement_id)
            .filter(UserAchievement.user_id == user_id)
            .scalar_subquery()
        )

        for achievement in all_achievements:
            if achievement.id in earned_achievement_ids:
                continue  # –£–∂–µ –ø–æ–ª—É—á–µ–Ω–æ

            if self._check_achievement_condition(user_id, achievement):
                # –í—ã–¥–∞–µ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ
                user_achievement = UserAchievement(
                    user_id=user_id,
                    achievement_id=achievement.id
                )
                self.db.add(user_achievement)
                new_achievements.append(achievement)

        if new_achievements:
            self.db.commit()

        return new_achievements

    def _check_achievement_condition(self, user_id: int, achievement: Achievement) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —É—Å–ª–æ–≤–∏—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è"""
        condition_type = achievement.condition_type
        condition_value = achievement.condition_value
        condition_data = json.loads(achievement.condition_data) if achievement.condition_data else {}

        if condition_type == "tricks_learned":
            learned_count = self.db.query(UserProgress).filter(UserProgress.user_id == user_id).count()
            return learned_count >= condition_value

        elif condition_type == "category_mastered":
            category = condition_data.get("category")
            if not category:
                return False
            
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ç—Ä—é–∫–∏ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
            total_in_category = self.db.query(Trick).filter(Trick.category == category).count()
            if total_in_category == 0:
                return False
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–∑—É—á–µ–Ω–Ω—ã–µ —Ç—Ä—é–∫–∏ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
            learned_in_category = self.db.query(UserProgress).join(Trick).filter(
                UserProgress.user_id == user_id,
                Trick.category == category
            ).count()
            
            return learned_in_category == total_in_category

        elif condition_type == "daily_streak":
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –ø–æ–¥—Ä—è–¥ —Å –∏–∑—É—á–µ–Ω–Ω—ã–º–∏ —Ç—Ä—é–∫–∞–º–∏
            streak_days = self._calculate_daily_streak(user_id)
            return streak_days >= condition_value

        elif condition_type == "tricks_suggested":
            from .models import TrickSuggestion
            suggested_count = self.db.query(TrickSuggestion).filter(
                TrickSuggestion.suggested_by == user_id
            ).count()
            return suggested_count >= condition_value

        return False

    def _calculate_daily_streak(self, user_id: int) -> int:
        """–í—ã—á–∏—Å–ª—è–µ—Ç —Ç–µ–∫—É—â—É—é —Å–µ—Ä–∏—é –¥–Ω–µ–π —Å –∏–∑—É—á–µ–Ω–Ω—ã–º–∏ —Ç—Ä—é–∫–∞–º–∏"""
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞—Ç—ã –∏–∑—É—á–µ–Ω–∏—è —Ç—Ä—é–∫–æ–≤, —Å–≥—Ä—É–ø–ø–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ –¥–Ω—è–º
        progress_dates = self.db.query(
            func.date(UserProgress.learned_at).label('date')
        ).filter(
            UserProgress.user_id == user_id
        ).distinct().order_by(
            func.date(UserProgress.learned_at).desc()
        ).all()

        if not progress_dates:
            return 0

        streak = 0
        current_date = datetime.now().date()
        
        for date_row in progress_dates:
            date = date_row.date
            expected_date = current_date - timedelta(days=streak)
            
            if date == expected_date:
                streak += 1
            else:
                break
                
        return streak

    def get_user_achievements(self, user_id: int) -> dict:
        """–ü–æ–ª—É—á–∞–µ—Ç –≤—Å–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π"""
        user_achievements = self.db.query(UserAchievement).filter(
            UserAchievement.user_id == user_id
        ).join(Achievement).order_by(UserAchievement.earned_at.desc()).all()

        total_points = sum(ua.achievement.points for ua in user_achievements)
        
        return {
            "total_points": total_points,
            "achievements_count": len(user_achievements),
            "achievements": user_achievements,
            "recent_achievements": user_achievements[:5]  # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 5
        }

    def get_leaderboard(self, limit: int = 10) -> List[dict]:
        """–ü–æ–ª—É—á–∞–µ—Ç —Ç–æ–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ –æ—á–∫–∞–º"""
        # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –æ—á–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_points = self.db.query(
            User.id,
            User.username,
            func.coalesce(func.sum(Achievement.points), 0).label('total_points'),
            func.count(UserAchievement.id).label('achievements_count')
        ).outerjoin(
            UserAchievement, User.id == UserAchievement.user_id
        ).outerjoin(
            Achievement, UserAchievement.achievement_id == Achievement.id
        ).group_by(
            User.id, User.username
        ).order_by(
            func.coalesce(func.sum(Achievement.points), 0).desc()
        ).limit(limit).all()

        return [
            {
                "user_id": row.id,
                "username": row.username,
                "total_points": int(row.total_points),
                "achievements_count": row.achievements_count,
                "rank": idx + 1
            }
            for idx, row in enumerate(user_points)
        ]
