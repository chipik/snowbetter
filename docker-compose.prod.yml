version: "3.8"

services:
  postgres:
    image: postgres:15-alpine
    container_name: ushe_luche_postgres_prod
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-snowboard_tricks}
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d ${POSTGRES_DB:-snowboard_tricks}"]
      interval: 10s
      timeout: 5s
      retries: 10
    restart: unless-stopped
    networks: [app]

  redis:
    image: redis:7-alpine
    container_name: ushe_luche_redis_prod
    command: >
      sh -c "redis-server --appendonly yes --requirepass \"$${REDIS_PASSWORD}\""
    environment:
      REDIS_PASSWORD: ${REDIS_PASSWORD}
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD-SHELL", "redis-cli -a $${REDIS_PASSWORD} ping | grep PONG"]
      interval: 10s
      timeout: 5s
      retries: 10
    restart: unless-stopped
    networks: [app]

  backend:
    # предполагаю, что в репозитории есть ./backend/Dockerfile (как в dev)
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: ushe_luche_backend_prod
    env_file:
      - .env
    environment:
      # Жёстко согласуем с postgres выше (user=postgres, db= snow…)
      DATABASE_URL: postgresql+psycopg2://postgres:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB:-snowboard_tricks}
      SECRET_KEY: ${SECRET_KEY}
      CORS_ORIGINS: ${CORS_ORIGINS}
      REDIS_URL: redis://default:${REDIS_PASSWORD}@redis:6379/0
      LOG_LEVEL: ${LOG_LEVEL:-INFO}
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_started
    expose:
      - "8000"
    restart: unless-stopped
    networks: [app]

  frontend:
    # ТОЛЬКО используем твой рабочий Dockerfile.prod для сборки статики + nginx
    build:
      context: ./frontend
      dockerfile: Dockerfile.prod
    container_name: ushe_luche_frontend_prod
    env_file:
      - .env
    # фронтенд служит статикой на 80 в своём контейнере
    expose:
      - "80"
    restart: unless-stopped
    networks: [app]

  # Публичный reverse-proxy, который принимает 80/443
  nginx:
    image: nginx:1.25-alpine
    container_name: ushe_luche_nginx_prod
    depends_on:
      - backend
      - frontend
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      # На запуске используем http-конфиг, чтобы отдать webroot для certbot
      - ./nginx/conf.d/app.http.conf:/etc/nginx/conf.d/app.conf:ro
      - certbot-www:/var/www/certbot
      - letsencrypt:/etc/letsencrypt
    restart: unless-stopped
    networks: [app]

  # Certbot, webroot-режим. Держим контейнер «спящим» и используем для init/renew.
  certbot:
    image: certbot/certbot:latest
    container_name: ushe_luche_certbot_prod
    volumes:
      - certbot-www:/var/www/certbot
      - letsencrypt:/etc/letsencrypt
    networks: [app]
    entrypoint: ["sh", "-c", "sleep infinity"]

volumes:
  postgres_data:
  redis_data:
  certbot-www:
  letsencrypt:

networks:
  app:
    driver: bridge
