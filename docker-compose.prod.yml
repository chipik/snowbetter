version: "3.9"

services:
  backend:
    container_name: ushe_luche_backend_prod
    build:
      context: .
      dockerfile: backend/Dockerfile.prod
    env_file:
      - .env
    restart: always
    depends_on:
      - db
      - redis
    networks:
      - app-network

  frontend:
    container_name: ushe_luche_frontend_prod
    build:
      context: ./frontend
      dockerfile: Dockerfile.prod   # исправленный (с npm install)
    restart: always
    networks:
      - app-network

  nginx:
    container_name: ushe_luche_nginx_prod
    image: nginx:alpine
    volumes:
      - ./nginx/prod.conf:/etc/nginx/nginx.conf:ro
      - ./certbot/www:/var/www/certbot/:ro
      - ./certbot/conf:/etc/letsencrypt/:ro
    depends_on:
      - frontend
      - backend
    ports:
      - "80:80"
      - "443:443"
    restart: always
    networks:
      - app-network

  certbot:
    container_name: ushe_luche_certbot_prod
    image: certbot/certbot
    volumes:
      - ./certbot/www:/var/www/certbot/:rw
      - ./certbot/conf:/etc/letsencrypt/:rw
    entrypoint: >
      sh -c "trap exit TERM;
             while :; do
               certbot renew --webroot -w /var/www/certbot;
               sleep 12h & wait $${!};
             done;"
    networks:
      - app-network

  db:
    container_name: ushe_luche_db_prod
    image: postgres:15-alpine
    environment:
      POSTGRES_DB: postgres
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - db-data:/var/lib/postgresql/data
    restart: always
    networks:
      - app-network

  redis:
    container_name: ushe_luche_redis_prod
    image: redis:alpine
    command: redis-server --requirepass ${REDIS_PASSWORD}
    restart: always
    networks:
      - app-network

volumes:
  db-data:

networks:
  app-network:
    driver: bridge
