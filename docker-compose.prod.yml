version: '3.8'

services:
  postgres:
    image: postgres:15-alpine
    container_name: ushe_luche_postgres_prod
    environment:
      POSTGRES_DB: snowboard_tricks
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    restart: unless-stopped
    networks:
      - app_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d snowboard_tricks"]
      interval: 10s
      timeout: 5s
      retries: 5

  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: ushe_luche_backend_prod
    environment:
      - DATABASE_URL=postgresql://postgres:${POSTGRES_PASSWORD}@postgres:5432/snowboard_tricks
      - SECRET_KEY=${SECRET_KEY}
      - ALGORITHM=HS256
      - ACCESS_TOKEN_EXPIRE_MINUTES=30
      - CORS_ORIGINS=${CORS_ORIGINS}
      - ENVIRONMENT=production
      - LOG_LEVEL=${LOG_LEVEL}
    volumes:
      - ./uploads:/app/uploads
      - ./logs:/app/logs
    restart: unless-stopped
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - app_network
    command: uvicorn app.main:app --host 0.0.0.0 --port 8000
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8000/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile.prod
    container_name: ushe_luche_frontend_prod
    environment:
      - REACT_APP_API_URL=${REACT_APP_API_URL}
      - REACT_APP_ENVIRONMENT=production
    restart: unless-stopped
    depends_on:
      - backend
    networks:
      - app_network
    # Важно: используем CMD из Dockerfile.prod (без npm run build здесь!)
    # поэтому command не нужен

  nginx:
    image: nginx:alpine
    container_name: ushe_luche_nginx_prod
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl
      - ./logs/nginx:/var/log/nginx
      - ./uploads:/var/www/uploads:ro
    restart: unless-stopped
    depends_on:
      - backend
      - frontend
    networks:
      - app_network

  certbot:
    image: certbot/certbot
    container_name: ushe_luche_certbot_prod
    volumes:
      - ./nginx/ssl:/etc/letsencrypt
      - ./nginx/webroot:/var/www/html
    command: >
      certonly --webroot --webroot-path=/var/www/html
      --email ${CERTBOT_EMAIL}
      --agree-tos
      --no-eff-email
      -d ${DOMAIN}
      -d www.${DOMAIN}
    depends_on:
      - nginx
    networks:
      - app_network

  redis:
    image: redis:7-alpine
    container_name: ushe_luche_redis_prod
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD}
    volumes:
      - redis_data:/data
    restart: unless-stopped
    networks:
      - app_network
    healthcheck:
      test: ["CMD-SHELL", "redis-cli -a ${REDIS_PASSWORD} ping | grep PONG || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local

networks:
  app_network:
    driver: bridge
